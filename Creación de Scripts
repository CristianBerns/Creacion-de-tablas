-- Armado de base de datos y tablas

CREATE SCHEMA IF NOT EXISTS LibreriaFinanciera;
USE LibreriaFinanciera;

CREATE TABLE IF NOT EXISTS producto (
Id INT AUTO_INCREMENT,
Editorial VARCHAR(100) NOT NULL,
Autor VARCHAR(100) NOT NULL,
Título VARCHAR (100) NOT NULL,
Categoría VARCHAR (50),
Precio DECIMAL (8,2),
PRIMARY KEY (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM producto;
-- DROP TABLE producto; 

CREATE TABLE IF NOT EXISTS cliente (
Id INT AUTO_INCREMENT,
Email VARCHAR (50) NOT NULL UNIQUE,
Nombre_cliente VARCHAR (25) NOT NULL,
Apellido_cliente VARCHAR (25) NOT NULL,
Domicilio_cliente VARCHAR (25) NOT NULL,
Telefono_cliente VARCHAR (25) NOT NULL UNIQUE,
PRIMARY KEY (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM cliente;
-- DROP TABLE cliente;

CREATE TABLE IF NOT EXISTS nuevos_clientes ( -- Tabla utilizada para crear Trigger
Id INT AUTO_INCREMENT,
Email VARCHAR (50) NOT NULL UNIQUE,
Nombre_cliente VARCHAR (25) NOT NULL,
Apellido_cliente VARCHAR (25) NOT NULL,
Domicilio_cliente VARCHAR (25) NOT NULL,
Telefono_cliente VARCHAR (25) NOT NULL UNIQUE,
PRIMARY KEY (Id)
);

CREATE TABLE IF NOT EXISTS order_picking (
Id INT AUTO_INCREMENT,
Id_Prod INT NOT NULL,
Fecha_solicitud DATE NOT NULL,
Cantidad INT NOT NULL,
Id_Usuario INT NOT NULL,
PRIMARY KEY (Id),
FOREIGN KEY (Id_Prod) REFERENCES producto (Id),
FOREIGN KEY (Id_usuario) REFERENCES cliente (Id)
);

-- Comandos para ir probando:
-- Select * from Order_picking;
-- DROP TABLE order_picking;

CREATE TABLE IF NOT EXISTS repartidores (
Repartidor INT AUTO_INCREMENT,
Nombre VARCHAR (30) NOT NULL,
Apellido VARCHAR (30) NOT NULL,
Tel_repartidor VARCHAR (25) NULL UNIQUE,
Email_repartidor Varchar (50) NOT NULL UNIQUE,
PRIMARY KEY (Repartidor)
);

-- Comandos para ir probando:
-- SELECT * FROM repartidores;
-- DROP TABLE repartidores;

CREATE TABLE IF NOT EXISTS codigos_postales (
Id INT NOT NULL UNIQUE,
Codigo INT,
Provincia VARCHAR (30) NOT NULL,
Partido VARCHAR (30) NOT NULL,
Localidad VARCHAR (30) NOT NULL,
PRIMARY KEY (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM codigos_postales;
-- DROP TABLE codigos_postales;

CREATE TABLE IF NOT EXISTS envio (
Id INT AUTO_INCREMENT,
Fecha_entrega DATE NOT NULL,
Id_usuario INT NOT NULL,
Costo_envio DECIMAL (6,2) NOT NULL,
Codigo_postal INT NOT NULL, 
Id_repartidor INT NOT NULL, 
PRIMARY KEY (Id),
FOREIGN KEY (Id_usuario) REFERENCES cliente (Id),
FOREIGN KEY (Id_repartidor) REFERENCES repartidores (Repartidor),
FOREIGN KEY (Codigo_postal) REFERENCES codigos_postales (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM envio;
-- DROP TABLE envio;

CREATE TABLE IF NOT EXISTS facturacion (
Id INT AUTO_INCREMENT,
Id_Prod INT NOT NULL,
Id_envio INT NOT NULL,
Fecha_venta DATE NOT NULL,
Costo_total DECIMAL (9,2) NOT NULL,
PRIMARY KEY (Id),
FOREIGN KEY (Id_Prod) REFERENCES producto (Id),
FOREIGN KEY (Id_envio) REFERENCES envio (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM facturacion;
-- DROP TABLE facturacion;

CREATE TABLE IF NOT EXISTS proveedor (
Id INT AUTO_INCREMENT,
Razon_social VARCHAR (50) NOT NULL UNIQUE,
email VARCHAR (50) NOT NULL UNIQUE,
Tel_prov VARCHAR (25) NOT NULL UNIQUE,
Domicilio_prov Varchar (50) NOT NULL, -- No es unique, porque hay empresas ubicadas dentre de un mismo predio con mismo domicilio
PRIMARY KEY (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM proveedor;
-- DROP TABLE proveedor;

CREATE TABLE IF NOT EXISTS borrar_proveedor (
Id INT AUTO_INCREMENT,
Razon_social VARCHAR (50) NOT NULL UNIQUE,
email VARCHAR (50) NOT NULL UNIQUE,
Tel_prov VARCHAR (25) NOT NULL UNIQUE,
Domicilio_prov Varchar (50) NOT NULL, -- No es unique, porque hay empresas ubicadas dentre de un mismo predio con mismo domicilio
PRIMARY KEY (Id)
);

CREATE TABLE IF NOT EXISTS stock (
Item VARCHAR (50) NOT NULL UNIQUE,
Id_Prod INT NOT NULL,
Cantidad INT NOT NULL,
Stock_min INT NOT NULL,
Lead_time INT NOT NULL, -- Este campo indica la cantidad de días que demora el proveedor en entregarnos los productos para nuestro abastecimiento
Id_Proveedor INT NOT NULL,
PRIMARY KEY (Item),
FOREIGN KEY (Id_Prod) REFERENCES producto  (Id),
FOREIGN KEY (Id_Proveedor) REFERENCES proveedor (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM stock;
-- DROP TABLE stock;

CREATE TABLE IF NOT EXISTS compras (
Orden_de_compra VARCHAR (50) NOT NULL UNIQUE,
Fecha DATE NOT NULL,
Id_Proveedor INT NOT NULL,
Costo_compra DECIMAL (9,2) NOT NULL,
PRIMARY KEY (Orden_de_compra),
FOREIGN KEY (Id_Proveedor) REFERENCES proveedor (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM compras;
-- DROP TABLE compras;

CREATE TABLE IF NOT EXISTS entidad_financiera (
Id INT AUTO_INCREMENT,
Entidad_financiera VARCHAR (50) NOT NULL,
Número_Tarjeta VARCHAR (20) NULL UNIQUE,
Pin_seguridad INT NOT NULL,
Nombre VARCHAR (30) NOT NULL,
Apellido VARCHAR (30) NOT NULL,
Vencimiento DATE NOT NULL,
PRIMARY KEY (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM entidad_financiera;
-- DROP TABLE entidad_financiera;

CREATE TABLE IF NOT EXISTS ventas (
Id INT AUTO_INCREMENT,
Fecha_venta DATE NOT NULL,
Id_Prod INT NOT NULL,
Id_cliente INT NOT NULL,
PRIMARY KEY (Id),
FOREIGN KEY (Id_Prod) REFERENCES producto (Id),
FOREIGN KEY (Id_cliente) REFERENCES cliente (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM ventas;
-- DROP TABLE ventas;

CREATE TABLE IF NOT EXISTS satisfaccion_cliente (
Id INT AUTO_INCREMENT,
Calificación INT,
Comentarios VARCHAR (250),
Cliente INT NOT NULL,
Fecha_comentario DATE NOT NULL,
PRIMARY KEY (Id),
FOREIGN KEY (Cliente) REFERENCES cliente (Id)
);

-- Comandos para ir probando:
-- SELECT * FROM safitsfaccion_cliente;
-- DROP TABLE satisfaccion_cliente;

-- CREACIÓN DE VISTAS 

USE libreriafinanciera;

-- Vista de Ventas mensuales por título

CREATE VIEW Ventas_mes_vw AS
SELECT 
  DATE_FORMAT(v.Fecha_venta, '%Y-%m') AS Mes,
  p.Título AS 'Libro',
  p.Precio AS 'Precio unitario',
  SUM(p.precio) AS 'Ventas totales'
FROM ventas v
JOIN producto p ON v.Id_Prod = p.Id
GROUP BY DATE_FORMAT(v.Fecha_venta, '%Y-%m'), v.Id_Prod, p.Id, p.Precio;

-- Probar:
-- SELECT * FROM Ventas_mes_vw;
-- DROP VIEW Ventas_mes_vw;

-- Vista de stock: muestra la cantidad disponible de unidades de cada libro

CREATE VIEW stock_vw AS
SELECT 
p.Título AS Libro,
s.Cantidad AS Stock
FROM producto p
JOIN stock s on p.Id = s.Id_Prod
ORDER BY s.Cantidad ASC;

-- Probar:
-- SELECT * FROM stock_vw;
-- DROP view stock_vw;

-- Vista de compras por cliente

CREATE VIEW ventas_por_cliente_vw AS
SELECT DISTINCT
CONCAT (c.Nombre_cliente,' ',c.Apellido_cliente) AS Nombre,
p.Título AS Libro
FROM cliente c
JOIN ventas v ON c.Id= v.Id
JOIN producto p on v.Id_Prod= p.Id
ORDER BY Nombre ASC;

-- Probar:
-- SELECT * FROM ventas_por_cliente_vw;
-- DROP view ventas_por_cliente_vw;

-- Vista de libros de analisis técnico

CREATE VIEW Técnicos_vw AS
SELECT Título,Autor, Precio
FROM producto
WHERE Categoría = 'Análisis técnico'
ORDER BY Precio ASC;

-- Probar:
-- SELECT * FROM  Técnicos_vw;
-- DROP VIEW Técnicos_vw;

-- Vista de libros de analisis fundamental
CREATE VIEW Fundamental_vw AS
SELECT Título,Autor, Precio
FROM producto
WHERE Categoría = 'Análisis fundamental'
ORDER BY Precio ASC;

-- Probar:
-- SELECT * FROM  Fundamental_vw;
-- DROP VIEW Fundamental_vw;


-- CREACIÓN DE FUNCIONES 

CREATE DEFINER=`root`@`localhost` FUNCTION `Precio_del_libro`(Libro VARCHAR(100)) RETURNS decimal(8,2)
    READS SQL DATA
BEGIN
    DECLARE precio_libro DECIMAL(8,2);
    
    SELECT Precio INTO precio_libro
    FROM producto
    WHERE Título LIKE CONCAT('%', Libro, '%'); -- El nombre del libro debe estar entre comillas, por ser tipo VARCHAR
    
    RETURN precio_libro;

END

CREATE DEFINER=`root`@`localhost` FUNCTION `Stock_libros`(Id INT) RETURNS int
    READS SQL DATA
BEGIN
    DECLARE stock_de_libros DECIMAL(8,2);
    
    SELECT Cantidad INTO stock_de_libros
    FROM stock
    WHERE Id_Prod = Id; -- El nombre del libro debe estar entre comillas, por ser tipo VARCHAR
    
    RETURN stock_de_libros;

END

-- PRUEBA DE FUNCIONES

-- Función de stock: para esta función, se debe ingresar el Id del producto
select stock_libros (4) AS stock;

-- Función precio del libro: en este caso, la función tiene un like, que permite colocar una parte del nombre del libro, y no es necesario ingresarlo completo
select Precio_del_libro ('Paso') AS precio;

-- STORED PROCEDURES
--SP 1

CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_libros`(IN campo_ordenador VARCHAR(100), IN orden VARCHAR(10))
BEGIN
  -- Validar si el campo_ordenador es "Título" para después armar la consulta
  IF campo_ordenador = 'Título' OR campo_ordenador = 'Autor' THEN
    SET @libro = CONCAT('SELECT * FROM libreriafinanciera.producto ORDER BY ', campo_ordenador, ' ', orden);
    -- Preparar y ejecutar la consulta dinámica.
    PREPARE stmt FROM @libro;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
  ELSE
    -- Si el campo_ordenador no es "Título" ni "Autor", mostrar un mensaje de error.
    SELECT 'Error: El campo_ordenador debe ser "Título" o "Autor"' AS Mensaje;
  END IF;
END

-- SP 2

CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_agregar_stock`(IN id_producto INT, IN cantidad_ingresada INT)
BEGIN
    -- Ver si el producto ya existe en la tabla stock
    DECLARE producto_existente INT;
    SET producto_existente = (SELECT COUNT(*) FROM stock WHERE Id_Prod = id_producto);

    IF producto_existente > 0 THEN
-- Actualizar la cantidad de stock
        UPDATE stock SET Cantidad = Cantidad + cantidad_ingresada WHERE Id_Prod = id_producto;
    ELSE
-- Mostrar alerta
        SELECT 'Id inexistente' AS Alerta;
    END IF;
    
-- Fin del procedimiento
END

-- PRUEBAS DE SP

-- Stored Procedures 1
CALL sp_libros('Título', 'DESC');

-- Stored Procedures 2
CALL sp_agregar_stock(5, 4)
-- Si en SQL citas la tabla Stock, vas a ver que antes después de ejecutar este comando, el Id_prod va a aumentar su stock en 4 unidades

-- TRIGGERS
-- 1
CREATE TRIGGER tr_eliminar_provedores
BEFORE DELETE ON proveedor
FOR EACH ROW
INSERT INTO borrar_proveedor (Item, Id_Prod, Cantidad, Stock_min, Lead_time, Id_Proveedor, Usuario, Fecha, Hora)
VALUES (OLD.Id, OLD.Razon_social, OLD.email, OLD.Tel_prov, OLD.Domicilio_prov, USER(), CURDATE(), CURTIME());

-- 2
REATE TRIGGER tr_agregar_clientes_nuevos
AFTER INSERT ON cliente -- Después de que se inserten uno o más registros en la tabla cliente, se agregaran datos a nuestra nueva tabla
FOR EACH ROW
INSERT INTO nuevos_clientes (Usuario, Fecha, Hora, Id, Email, Nombre_cliente, Apellido_cliente, Domicilio_cliente, Telefono_cliente) -- La tabla que utilizaremos se llamará nuevos_clientes, no usaremos un Log
VALUES (USER(), CURDATE(), CURTIME(), NEW.Id, NEW.Email, NEW.Nombre_cliente, NEW.Apellido_cliente, NEW.Domicilio_cliente, NEW.Telefono_cliente); -- Además de los datos de los clientes, agregamos el usuario, la fecha y el horario en que se realizó

-- SUBLENGUAJE TCL

-- Primera Tabla

USE LibreriaFinanciera;

START TRANSACTION;
DELETE FROM producto -- Indico sobre que tabla eliminaré los registros
WHERE id <= 5; -- Eliminamos los primeros 5 registros de la tabla
ROLLBACK; -- Deshacemos la eliminación usando un rollback
-- COMMIT; coloco el "Commit comentado, tal como lo solicta la consigna

-- Segunda tabla

START TRANSACTION;

-- Inserción de 4 registros nuevos en la tabla repartidores

INSERT INTO repartidores (Repartidor, Nombre, Apellido, Tel_repartidor, Email_repartidor) VALUES (6, 'Laura', 'García', '11-0123-4567', 'laura.garcia@hotmail.com'),
INSERT INTO repartidores (Repartidor, Nombre, Apellido, Tel_repartidor, Email_repartidor) VALUES (7, 'Miguel', 'López', '11-1234-5678', 'miguel.lopez@hotmail.com'),
INSERT INTO repartidores (Repartidor, Nombre, Apellido, Tel_repartidor, Email_repartidor) VALUES (8, 'Sofía', 'Pérez', '11-2345-6789', 'sofia.perez@hotmail.com'),
INSERT INTO repartidores (Repartidor, Nombre, Apellido, Tel_repartidor, Email_repartidor) VALUES (9, 'Fernando', 'Rodríguez', '11-3456-7890', 'fernando.rodriguez@hotmail.com');

-- Crear un SAVEPOINT llamado "nuevos_cuatro"
SAVEPOINT nuevos_cuatro;

INSERT INTO repartidores (Repartidor, Nombre, Apellido, Tel_repartidor, Email_repartidor) VALUES (10, 'Ana', 'Martínez', '11-4567-8901', 'ana.martinez@hotmail.com');
INSERT INTO repartidores (Repartidor, Nombre, Apellido, Tel_repartidor, Email_repartidor) VALUES (11, 'Diego', 'Gómez', '11-5678-9012', 'diego.gomez@hotmail.com');
INSERT INTO repartidores (Repartidor, Nombre, Apellido, Tel_repartidor, Email_repartidor) VALUES (12, 'Elena', 'Fernández', '11-6789-0123', 'elena.fernandez@hotmail.com');
INSERT INTO repartidores (Repartidor, Nombre, Apellido, Tel_repartidor, Email_repartidor) VALUES (13, 'Gabriel', 'Silva', '11-7890-1234', 'gabriel.silva@hotmail.com');

-- ROLLBACK TO SAVEPOINT nuevos_cuatro;
-- En la línea anterior está la eliminación del SAVEPOINT, comentarizada, tal como lo pide la consigna

COMMIT;


-- BACK UP DE RESTAURACIÓN

-- Backup de tres tablas: compras, ventas y satisfaccion_cliente

CREATE DATABASE  IF NOT EXISTS `libreriafinanciera` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `libreriafinanciera`;
-- MySQL dump 10.13  Distrib 8.0.33, for Win64 (x86_64)
--
-- Host: localhost    Database: libreriafinanciera
-- ------------------------------------------------------
-- Server version	8.0.33

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `compras`
--

LOCK TABLES `compras` WRITE;
/*!40000 ALTER TABLE `compras` DISABLE KEYS */;
/*!40000 ALTER TABLE `compras` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `satisfaccion_cliente`
--

LOCK TABLES `satisfaccion_cliente` WRITE;
/*!40000 ALTER TABLE `satisfaccion_cliente` DISABLE KEYS */;
INSERT INTO `satisfaccion_cliente` VALUES (1,6,'La entrega fue rápida, pero el libro venía con algunas páginas dobladas.',7,'2023-01-10'),(2,7,'Excelente servicio, el libro llegó en perfecto estado y antes de lo esperado.',2,'2023-02-15'),(3,8,'Buena experiencia, la compra fue sencilla y el libro llegó en buen estado.',4,'2023-03-20'),(4,9,'Muy contento con el servicio, el libro llegó muy bien empacado y a tiempo.',8,'2023-04-05'),(5,10,'¡Increíble! El servicio fue impecable, sin duda volveré a comprar aquí.',1,'2023-05-12'),(6,7,'Buena experiencia, aunque el seguimiento del envío no fue muy claro.',3,'2023-06-08'),(7,8,'Todo bien, el libro llegó en buen estado y en el plazo acordado.',9,'2023-01-25'),(8,9,'Muy satisfecho, el servicio al cliente fue excelente y el envío rápido.',4,'2023-02-18'),(9,10,'El mejor servicio que he tenido, el libro llegó perfectamente empacado.',6,'2023-03-17'),(10,6,'Hubo un pequeño retraso en la entrega, pero el libro llegó en buen estado.',5,'2023-04-30'),(11,4,'Mala experiencia, el libro llegó con retraso y dañado.',10,'2023-05-22'),(12,5,'No estoy satisfecho con el servicio, la comunicación fue deficiente.',8,'2023-06-03'),(13,8,'Buen servicio, el libro llegó en buen estado y en el plazo acordado.',10,'2023-01-08'),(14,6,'El libro llegó en buen estado, pero la entrega se retrasó un poco.',5,'2023-02-14'),(15,9,'Muy buen servicio, la atención al cliente fue excelente.',7,'2023-03-27'),(16,8,'La compra fue rápida y el libro llegó en buen estado.',1,'2023-04-19'),(17,7,'Buen servicio, aunque el envío se retrasó un poco.',9,'2023-05-11'),(18,5,'No estoy satisfecho con el servicio, el libro llegó con daños.',7,'2023-06-06'),(19,6,'La entrega fue rápida, pero el libro tenía algunas páginas dobladas.',8,'2023-01-14'),(20,8,'Muy buena experiencia, el libro llegó en perfecto estado y en el plazo acordado.',3,'2023-02-28');
/*!40000 ALTER TABLE `satisfaccion_cliente` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `ventas`
--

LOCK TABLES `ventas` WRITE;
/*!40000 ALTER TABLE `ventas` DISABLE KEYS */;
INSERT INTO `ventas` VALUES (1,'2023-01-01',9,6),(2,'2023-01-02',7,8),(3,'2023-01-03',8,2),(4,'2023-01-04',5,3),(5,'2023-01-05',2,7),(6,'2023-01-06',13,1),(7,'2023-01-07',3,9),(8,'2023-01-08',10,2),(9,'2023-01-09',11,10),(10,'2023-01-10',10,7),(11,'2023-01-11',5,5),(12,'2023-01-12',3,9),(13,'2023-01-13',1,3),(14,'2023-01-14',5,10),(15,'2023-01-15',14,7),(16,'2023-01-16',6,1),(17,'2023-01-17',13,6),(18,'2023-01-18',12,8),(19,'2023-01-19',7,2),(20,'2023-01-20',3,1),(21,'2023-01-21',11,3),(22,'2023-01-22',8,7),(23,'2023-01-23',5,4),(24,'2023-01-24',6,8),(25,'2023-01-25',10,9),(26,'2023-01-26',1,4),(27,'2023-01-27',7,10),(28,'2023-01-28',1,8),(29,'2023-01-29',11,7),(30,'2023-01-30',4,6),(31,'2023-02-01',11,5),(32,'2023-02-02',2,1),(33,'2023-02-03',11,9),(34,'2023-02-04',8,2),(35,'2023-02-05',5,10),(36,'2023-02-06',5,2),(37,'2023-02-07',8,9),(38,'2023-02-08',5,6),(39,'2023-02-09',4,5),(40,'2023-02-10',3,6),(41,'2023-02-11',12,4),(42,'2023-02-12',2,9),(43,'2023-02-13',6,4),(44,'2023-02-14',14,3),(45,'2023-02-15',9,5),(46,'2023-02-16',11,4),(47,'2023-02-17',3,2),(48,'2023-02-18',2,6),(49,'2023-02-19',2,1),(50,'2023-02-20',14,8),(51,'2023-02-21',9,9),(52,'2023-02-22',2,3),(53,'2023-02-23',12,4),(54,'2023-02-24',12,8),(55,'2023-02-25',8,6),(56,'2023-02-26',1,9),(57,'2023-02-27',1,2),(58,'2023-02-28',12,8),(59,'2023-03-01',12,9),(60,'2023-03-02',5,7),(61,'2023-03-03',8,6),(62,'2023-03-04',4,7),(63,'2023-03-05',12,10),(64,'2023-03-06',7,3),(65,'2023-03-07',8,5),(66,'2023-03-08',11,2),(67,'2023-03-09',4,7),(68,'2023-03-10',11,2),(69,'2023-03-11',1,5),(70,'2023-03-12',13,10),(71,'2023-03-13',7,6),(72,'2023-03-14',13,3),(73,'2023-03-15',11,1),(74,'2023-03-16',4,2),(75,'2023-03-17',12,6),(76,'2023-03-18',11,8),(77,'2023-03-19',9,9),(78,'2023-03-20',6,7),(79,'2023-03-21',6,10),(80,'2023-03-22',2,7),(81,'2023-03-23',4,10),(82,'2023-03-24',2,7),(83,'2023-03-25',1,5),(84,'2023-03-26',6,1),(85,'2023-03-27',3,5),(86,'2023-03-28',11,8),(87,'2023-03-29',13,10),(88,'2023-03-30',11,7),(89,'2023-03-31',5,9),(90,'2023-04-01',6,5),(91,'2023-04-02',13,8),(92,'2023-04-03',12,5),(93,'2023-04-04',1,3),(94,'2023-04-05',7,4),(95,'2023-04-06',12,10),(96,'2023-04-07',11,2),(97,'2023-04-08',11,1),(98,'2023-04-09',3,3),(99,'2023-04-10',10,9),(100,'2023-04-11',6,4),(101,'2023-04-12',11,10),(102,'2023-04-13',5,4),(103,'2023-04-14',10,3),(104,'2023-04-15',4,2),(105,'2023-04-16',2,7),(106,'2023-04-17',12,3),(107,'2023-04-18',8,9),(108,'2023-04-19',7,1),(109,'2023-04-20',1,3),(110,'2023-04-21',12,6),(111,'2023-04-22',7,5),(112,'2023-04-23',9,9),(113,'2023-04-24',6,2),(114,'2023-04-25',12,4),(115,'2023-04-26',8,8),(116,'2023-04-27',6,2),(117,'2023-04-28',2,4),(118,'2023-04-29',8,3),(119,'2023-04-30',7,2),(120,'2023-05-01',3,1),(121,'2023-05-02',6,5),(122,'2023-05-03',3,1),(123,'2023-05-04',11,9),(124,'2023-05-05',5,6),(125,'2023-05-06',1,5),(126,'2023-05-07',4,8),(127,'2023-05-08',7,10),(128,'2023-05-09',2,7),(129,'2023-05-10',2,10),(130,'2023-05-11',4,3),(131,'2023-05-12',1,6),(132,'2023-05-13',6,5),(133,'2023-05-14',9,8),(134,'2023-05-15',8,10),(135,'2023-05-16',8,7),(136,'2023-05-17',3,9),(137,'2023-05-18',3,3),(138,'2023-05-19',9,4),(139,'2023-05-20',5,5),(140,'2023-05-21',10,9),(141,'2023-05-22',7,8),(142,'2023-05-23',5,3),(143,'2023-05-24',2,7),(144,'2023-05-25',9,1),(145,'2023-05-26',12,6),(146,'2023-05-27',1,3),(147,'2023-05-28',3,6),(148,'2023-05-29',6,8),(149,'2023-05-30',8,4),(150,'2023-05-31',6,5),(151,'2023-06-01',2,2),(152,'2023-06-02',3,8),(153,'2023-06-03',2,3),(154,'2023-06-04',3,6),(155,'2023-06-05',6,10),(156,'2023-06-06',2,4),(157,'2023-06-07',11,9),(158,'2023-06-08',12,3),(159,'2023-06-09',10,2),(160,'2023-06-10',12,8),(161,'2023-06-11',12,2),(162,'2023-06-12',6,8),(163,'2023-06-13',8,4),(164,'2023-06-14',5,9),(165,'2023-06-15',5,4),(166,'2023-06-16',2,10),(167,'2023-06-17',1,8),(168,'2023-06-18',9,2),(169,'2023-06-19',1,7),(170,'2023-06-20',6,1),(171,'2023-06-21',4,7),(172,'2023-06-22',8,8),(173,'2023-06-23',12,1),(174,'2023-06-24',12,10),(175,'2023-06-25',9,2),(176,'2023-06-26',8,8),(177,'2023-06-27',4,10),(178,'2023-06-28',1,5),(179,'2023-06-29',7,6),(180,'2023-06-30',6,9);
/*!40000 ALTER TABLE `ventas` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping routines for database 'libreriafinanciera'
--
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-08-27 23:51:00

-- CREACIÓN DE USUARIOS Y CONTRASEÑA

USE libreriafinanciera;

-- Comenzamos con el ejercicio del primer usuario
CREATE USER 'Bart'@'localhost' IDENTIFIED BY 'Simpson'; -- Creación del primer usuario, con su correspondiente contraseña
GRANT SELECT ON libreriafinanciera.* TO 'Bart'@'localhost'; -- Asignación de permisos de lectura al primer usuario
REVOKE DELETE ON libreriafinanciera.* FROM 'Bart'@'localhost'; -- Prohibición de eliminación de registros al primer usuario

-- Segundo usuario

CREATE USER 'Ned'@'localhost' IDENTIFIED BY 'Flanders'; -- Creación del segundo usuario, con su correspondiente contraseña
GRANT SELECT, INSERT, UPDATE ON libreriafinanciera.* TO 'Ned'@'localhost'; -- Asignación de permisos de lecutra, inserción y modificación 
REVOKE DELETE ON libreriafinanciera.* FROM 'Ned'@'localhost'; -- Imposibilidad de eliminar datos
